// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model User {
  id             Int           @id @default(autoincrement())
  name           String
  phone          String?       @unique
  email          String?       @unique
  avatarUrl      String?
  created        DateTime      @default(now())
  upadated       DateTime      @updatedAt
  tokens         Token[]
  products       Product[]
  favLists       FavList[]
  buyLists       BuyList[]
  soldLists      SoldList[]
  posts          Post[]
  answers        Answer[]
  curious        CuriousPost[]
  writeReviews   Review[]      @relation(name: "writeReview")
  receiveReviews Review[]      @relation(name: "receiveReview")
  livestreams    LiveStream[]
  livemessages   LiveMessage[]
}

model Token {
  id       Int      @id @default(autoincrement())
  payload  String   @unique
  created  DateTime @default(now())
  upadated DateTime @updatedAt
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int

  @@index([userId])
}

// 상품
model Product {
  id        Int        @id @default(autoincrement())
  name      String
  imgUrl    String     @db.LongText
  price     Int
  des       String     @db.MediumText
  created   DateTime   @default(now())
  upadated  DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  favLists  FavList[]
  buyLists  BuyList[]
  soldLists SoldList[]

  @@index([userId])
}

// 상품 - 관심 목록 (Fav)
model FavList {
  id        Int      @id @default(autoincrement())
  created   DateTime @default(now())
  upadated  DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int

  @@index([userId, productId])
}

// 상품 - 구매 목록 (Buy)
model BuyList {
  id        Int      @id @default(autoincrement())
  created   DateTime @default(now())
  upadated  DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int

  @@index([userId, productId])
}

// 상품 - 판매 목록 (Sold)
model SoldList {
  id        Int      @id @default(autoincrement())
  created   DateTime @default(now())
  upadated  DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int

  @@index([userId, productId])
}

// 동네생활 - 질문
model Post {
  id        Int           @id @default(autoincrement())
  question  String        @db.MediumText
  longitude Float?
  latitude  Float?
  created   DateTime      @default(now())
  upadated  DateTime      @updatedAt
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  answers   Answer[]
  curious   CuriousPost[]

  @@index([userId])
}

// 동네생활 - 궁금해요
model CuriousPost {
  id       Int      @id @default(autoincrement())
  created  DateTime @default(now())
  upadated DateTime @updatedAt
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int
  post     Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId   Int

  @@index([userId, postId])
}

// 동네생활 - 답변
model Answer {
  id       Int      @id @default(autoincrement())
  answer   String   @db.MediumText
  created  DateTime @default(now())
  upadated DateTime @updatedAt
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int
  post     Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId   Int

  @@index([userId, postId])
}

// 유저 리뷰
model Review {
  id         Int      @id @default(autoincrement())
  review     String   @db.MediumText
  grade      Int      @default(1)
  created    DateTime @default(now())
  upadated   DateTime @updatedAt
  writer     User     @relation(name: "writeReview", fields: [writerId], references: [id], onDelete: Cascade)
  receiver   User     @relation(name: "receiveReview", fields: [receivedId], references: [id], onDelete: Cascade)
  writerId   Int
  receivedId Int

  @@index([writerId, receivedId])
}

// 라이브 스트림
model LiveStream {
  id           Int           @id @default(autoincrement())
  name         String
  streamId     String
  streamUrl    String
  streamKey    String
  created      DateTime      @default(now())
  upadated     DateTime      @updatedAt
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int
  livemessages LiveMessage[]

  @@index([userId])
}

// 라이브 스트림 - 메시지
model LiveMessage {
  id           Int        @id @default(autoincrement())
  msg          String     @db.MediumText
  created      DateTime   @default(now())
  upadated     DateTime   @updatedAt
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int
  livestream   LiveStream @relation(fields: [liveStreamId], references: [id], onDelete: Cascade)
  liveStreamId Int

  @@index([userId, liveStreamId])
}
